0.面向对象是什么？
  我的理解：
  （1）数据不公开，方法公开。要想访问数据，必须通过调用对象的方法。
  （2）把所有能提取、可能改变的东西都提取出来，静态的/属性就是数据，动态的/行为就是方法。
       然后通过创建一个又一个的对象实例，相互间进行调用，合作来实现一个大功能。
  （3）越是复杂、往后改动越大的功能，用面向对象方法越好，逻辑上、代码量上的修改会更少。

1.关于布局，有哪些（流式布局、自适应布局、响应式布局、圣杯布局都是些什么）
  网上查找的，比较符合我印象中的布局方式种类：
  （1）固定布局：写死，px做单位
  （2）流式布局/百分比布局：%做单位
  （3）自适应布局：em做单位
  （4）弹性布局：使用flex弹性伸缩盒子，好用！但是不兼容ie9以下
  （5）响应式布局：媒体查询后切换相应样式，可以用bootstrap框架完成
  另有：
   圣杯布局：左中右结构，左右固定宽度，中间自适应

2.闭包、异步
  闭包：闭包指的是有权访问父作用域的函数，即使在父函数关闭之后。(w3school定义)
  >>> 例如，要写一个计数器，要求：让外界能够访问add，但是又不能有权限修改count
  （1）w3school例子：
   var add = function(){
      var count = 0;
      return function () {
        return count++;
      }
   }();
  （2）根据理解，我又写了一个：
   (function () {
     var count = 0;
     function add() {
       return count++;
     }
     window.add = add;
   }());
   根据定义，add就是闭包函数，它访问了父作用域的count。
   那为什么使用闭包？
   这里我的理解是，类比java、C++之类，这些语言是有公有成员和私有成员的，而js没有，所以它可以通过闭包来实现部分数据的私有化，
   像计数器这个小例子，使用闭包函数add，就可以将count变量私有化不被外界改变
   
3.无意中看到的，应该是关于java的，sevlet的生命周期？

4.cookie、session、sessionStorage、localStorage
  cookie：保留，不知道
  session：保留，不知道
  sessionStorage：存储在客户端；最大5M；生命周期为当前浏览器窗口，关闭即清除；不同窗口数据不共享
  localStrage：存储在客户端：最大20M；生命周期很长，手动清除前都在；不同窗口数据共享
  
